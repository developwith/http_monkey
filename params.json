{"body":"# HTTP Monkey [![Build Status](https://secure.travis-ci.org/rogerleite/http_monkey.png?branch=master)](https://travis-ci.org/rogerleite/http_monkey)\r\n\r\nA fluent interface to do HTTP calls, free of fat dependencies and at same time, powered by middlewares rack.\r\n\r\n## Light and powerful\r\n\r\n``` ruby\r\n    # Works with Entry Point concept\r\n    response = HttpMonkey.at(\"http://google.com\").get\r\n    response = HttpMonkey.at(\"http://google.com\").post(:q => \"Http Monkey!\")\r\n    puts response.body  # More info about response at http://httpirb.com/#responses\r\n\r\n    ## Headers\r\n    HttpMonket.at(\"http://google.com\").\r\n      with_header(\"Content-Type\" => \"text/html\").\r\n      with_header(\"X-Custom\" => \"sample\").\r\n      get\r\n\r\n    ## Cookies\r\n    HttpMonkey.at(\"http://google.com\").set_cookie(\"blah\").get\r\n\r\n    ## Basic Authentication\r\n    HttpMonkey.at(\"http://user:pass@google.com\").get\r\n    HttpMonkey.at(\"http://google.com\").\r\n      basic_auth(\"user\", \"pass\").\r\n      get\r\n\r\n    ## Request Internals (yields HTTPI::Request, to set your obscure desires)\r\n    HttpMonkey.at(\"http://google.com\").yield_request do |req|\r\n      req.proxy = \"http://proxy.com\"\r\n      req.open_timeout = 30\r\n      req.read_timeout = 15\r\n    end.get\r\n\r\n    # SSL\r\n    HttpMonkey.at(\"http://google.com\").yield_request do |req|\r\n      req.auth.ssl.cert_key_file     = \"client_key.pem\"   # the private key file to use\r\n      req.auth.ssl.cert_key_password = \"C3rtP@ssw0rd\"     # the key file's password\r\n      req.auth.ssl.cert_file         = \"client_cert.pem\"  # the certificate file to use\r\n      req.auth.ssl.ca_cert_file      = \"ca_cert.pem\"      # the ca certificate file to use\r\n      req.auth.ssl.verify_mode       = :none              # or one of [:peer, :fail_if_no_peer_cert, :client_once]\r\n      req.auth.ssl.ssl_version       = :TLSv1             # or one of [:SSLv2, :SSLv3]\r\n    end.get\r\n\r\n    # HttpMonkey \"built-in\" middlewares\r\n    HttpMonkey.configure do\r\n      # Default HTTP Headers (to all requests)\r\n      middlewares.use HttpMonkey::M::DefaultHeaders, {\"Content-Type\" => \"application/json\"}\r\n\r\n      # Filter ALL requests (access to env and request objects)\r\n      middlewares.use HttpMonkey::M::RequestFilter do |env, request|\r\n        # HTTPI::Request, you can set proxy, timeouts, authentication etc.\r\n        # req.proxy = \"http://proxy.com\"\r\n      end\r\n\r\n      # Enable automatic follow redirect\r\n      middlewares.use HttpMonkey::M::FollowRedirect, :max_tries => 3\r\n    end\r\n```\r\n\r\n## Flexibility\r\n\r\nYou can configure the default or build your own client and define how it should behave.\r\n\r\nYou can also define net adapter, behaviours and middlewares by request.\r\n\r\n``` ruby\r\n    # Changing default client\r\n    HttpMonkey.configure do\r\n      net_adapter :curb\r\n      behaviours.on(500) do |client, request, response|\r\n        raise \"Server side error :X\"\r\n      end\r\n    end\r\n\r\n    # Works with status code callbacks (here known as behaviours)\r\n    chimp = HttpMonkey.build do\r\n      behaviours do\r\n        # 2xx range\r\n        on(200..299) do |client, request, response|\r\n          response\r\n        end\r\n        # Redirects\r\n        on([301, 302]) do |client, request, response|\r\n          raise \"Redirect error\"\r\n        end\r\n      end\r\n    end\r\n\r\n    chimp.at(\"http://google.com\").get  # raises Redirect error\r\n\r\n    # by request\r\n    chimp.at(\"http://google.com\").get do\r\n      behaviours.on(200) do |client, request, response|\r\n        raise \"ok\" # only for this request\r\n      end\r\n    end\r\n```\r\n\r\n## Choose your HTTP client\r\n\r\nThanks to [HTTPI](http://httpirb.com/), you can choose different HTTP clients:\r\n\r\n* [HTTPClient](http://rubygems.org/gems/httpclient)\r\n* [Curb](http://rubygems.org/gems/curb)\r\n* [Net::HTTP](http://ruby-doc.org/stdlib/libdoc/net/http/rdoc)\r\n\r\n*Important*: If you want to use anything other than Net::HTTP, you need to manually require the library or make sure itâ€™s available in your load path.\r\n\r\n``` ruby\r\n    # When you build your own client, you can define which Http client to use.\r\n    chimp = HttpMonkey.build do\r\n      # HTTP clients available [:httpclient, :curb, :net_http]\r\n      net_adapter :curb  # default :net_http\r\n      # [...]\r\n    end\r\n\r\n    # You can also change you net_adapter by request\r\n    chimp.at(\"http://google.com\").get do\r\n      # only on this request, use :httpclient\r\n      net_adapter :httpclient\r\n      # [...]\r\n    end\r\n```\r\n\r\n## More power to the people (for God sake!)\r\n\r\nEasy to extend, using the power of Rack middleware interface.\r\n\r\n``` ruby\r\n\r\n    class Logger\r\n      def initialize(app)\r\n        @app = app\r\n      end\r\n      def call(env)\r\n        puts \"-> before #{env.inspect} #{Time.now.inspect}\"\r\n        result = @app.call(env)\r\n        puts \"-> after #{env.inspect} #{Time.now.inspect}\"\r\n        result\r\n      end\r\n    end\r\n\r\n    # Add custom middlewares to default stack\r\n    HttpMonkey.configure do\r\n      middlewares do\r\n        use Logger\r\n      end\r\n    end\r\n    # Now all requests uses Logger\r\n    response = HttpMonkey.at(\"http://google.com\").get\r\n\r\n    # or when you build your own client\r\n    chimp = HttpMonkey.build do\r\n      middlewares do\r\n        use Logger\r\n      end\r\n    end\r\n\r\n    # or by request\r\n    chimp.at(\"http://google.com\").get do\r\n      middlewares.use Logger\r\n      # [...]\r\n    end\r\n```\r\n\r\nSome ideas to future:\r\n\r\n* Cache? Finish [cachebag](https://github.com/abril/cachebag)\r\n* Support Cookies with http_monkey-cookies (to do).\r\n* Logger? Maybe a built-in middleware? Apache/Custom format.\r\n* Cool ways to support asynchronous calls.\r\n\r\nYou can see my [presentation](http://www.slideshare.net/rogerleite14/http-monkey) in *pt-br* at Editora Abril.\r\n\r\n## Easy to contribute\r\n\r\nSuggestions, bugs and pull requests, here at [github.com/rogerleite/http_monkey](http://github.com/rogerleite/http_monkey).\r\n`bundle install`, `rake test` and be happy!\r\n\r\n## License\r\n\r\nHTTP Monkey is copyright 2012 Roger Leite and contributors. It is licensed under the MIT license. See the include LICENSE file for details.\r\n","tagline":"A fluent interface to do HTTP calls, free of fat dependencies and at same time, powered by middlewares rack.","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"HTTP Monkey"}